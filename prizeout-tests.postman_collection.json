{
  "info": {
    "name": "Prizeout Integration Tests",
    "description": "Comprehensive test suite for Memory Box Prizeout gift card integration",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "testUserId",
      "value": "test_user_123",
      "type": "string"
    },
    {
      "key": "prizeoutSecret",
      "value": "test_security_token_abc",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Get User Balance",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/prizeout/balance?userId={{testUserId}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "prizeout", "balance"],
          "query": [
            {
              "key": "userId",
              "value": "{{testUserId}}"
            }
          ]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has balance data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson.balance).to.have.property('totalAvailable');",
              "    pm.expect(responseJson.balance.totalAvailable).to.be.a('number');",
              "});",
              "",
              "// Store balance for later tests",
              "const balance = pm.response.json().balance.totalAvailable;",
              "pm.environment.set('userBalance', balance);"
            ]
          }
        }
      ]
    },
    {
      "name": "2. Create Redemption Session - Success",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"{{testUserId}}\",\n  \"amount\": 50,\n  \"retailerId\": \"amazon\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/prizeout/session",
          "host": ["{{baseUrl}}"],
          "path": ["api", "prizeout", "session"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response has session data', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "    pm.expect(responseJson.sessionId).to.be.a('string');",
              "    pm.expect(responseJson.launchUrl).to.be.a('string');",
              "});",
              "",
              "// Store session ID for webhook tests",
              "const sessionId = pm.response.json().sessionId;",
              "pm.environment.set('sessionId', sessionId);"
            ]
          }
        }
      ]
    },
    {
      "name": "3. Create Session - Insufficient Balance",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"{{testUserId}}\",\n  \"amount\": 10000\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/prizeout/session",
          "host": ["{{baseUrl}}"],
          "path": ["api", "prizeout", "session"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 400', function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "",
              "pm.test('Error message is correct', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error).to.equal('Insufficient balance');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "4. Webhook - Successful Redemption",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "x-signature",
            "value": "{{webhookSignature}}"
          },
          {
            "key": "x-timestamp",
            "value": "{{currentTimestamp}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"{{sessionId}}\",\n  \"status\": \"completed\",\n  \"transactionData\": {\n    \"transactionId\": \"txn_test_123\",\n    \"giftCard\": {\n      \"retailer\": \"Amazon\",\n      \"faceValue\": 50,\n      \"cardNumber\": \"1234-5678-9012-3456\",\n      \"pin\": \"7890\",\n      \"expiryDate\": \"2025-12-31\"\n    }\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/prizeout/webhook",
          "host": ["{{baseUrl}}"],
          "path": ["api", "prizeout", "webhook"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate current timestamp",
              "const timestamp = Date.now();",
              "pm.environment.set('currentTimestamp', timestamp);",
              "",
              "// Generate webhook signature",
              "const CryptoJS = require('crypto-js');",
              "const payload = pm.request.body.raw;",
              "const secret = pm.environment.get('prizeoutSecret');",
              "const signature = CryptoJS.HmacSHA256(timestamp + payload, secret).toString();",
              "pm.environment.set('webhookSignature', signature);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Webhook processed successfully', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.success).to.be.true;",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "5. Webhook - Failed Redemption",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "x-signature",
            "value": "{{webhookSignature}}"
          },
          {
            "key": "x-timestamp",
            "value": "{{currentTimestamp}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"session_failed_123\",\n  \"status\": \"failed\",\n  \"transactionData\": {\n    \"error\": \"Retailer temporarily unavailable\"\n  }\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/prizeout/webhook",
          "host": ["{{baseUrl}}"],
          "path": ["api", "prizeout", "webhook"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate current timestamp",
              "const timestamp = Date.now();",
              "pm.environment.set('currentTimestamp', timestamp);",
              "",
              "// Generate webhook signature",
              "const CryptoJS = require('crypto-js');",
              "const payload = pm.request.body.raw;",
              "const secret = pm.environment.get('prizeoutSecret');",
              "const signature = CryptoJS.HmacSHA256(timestamp + payload, secret).toString();",
              "pm.environment.set('webhookSignature', signature);"
            ]
          }
        }
      ]
    },
    {
      "name": "6. Webhook - Invalid Signature",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "x-signature",
            "value": "invalid_signature_123"
          },
          {
            "key": "x-timestamp",
            "value": "{{currentTimestamp}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"test_session\",\n  \"status\": \"completed\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/prizeout/webhook",
          "host": ["{{baseUrl}}"],
          "path": ["api", "prizeout", "webhook"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "const timestamp = Date.now();",
              "pm.environment.set('currentTimestamp', timestamp);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 401', function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "",
              "pm.test('Unauthorized error returned', function () {",
              "    const responseJson = pm.response.json();",
              "    pm.expect(responseJson.error).to.equal('Unauthorized');",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "7. Webhook - Old Timestamp",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          },
          {
            "key": "x-signature",
            "value": "{{webhookSignature}}"
          },
          {
            "key": "x-timestamp",
            "value": "{{oldTimestamp}}"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"sessionId\": \"test_session\",\n  \"status\": \"completed\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/prizeout/webhook",
          "host": ["{{baseUrl}}"],
          "path": ["api", "prizeout", "webhook"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "// Generate old timestamp (10 minutes ago)",
              "const oldTimestamp = Date.now() - (10 * 60 * 1000);",
              "pm.environment.set('oldTimestamp', oldTimestamp);",
              "",
              "// Generate signature with old timestamp",
              "const CryptoJS = require('crypto-js');",
              "const payload = pm.request.body.raw;",
              "const secret = pm.environment.get('prizeoutSecret');",
              "const signature = CryptoJS.HmacSHA256(oldTimestamp + payload, secret).toString();",
              "pm.environment.set('webhookSignature', signature);"
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 401', function () {",
              "    pm.response.to.have.status(401);",
              "});"
            ]
          }
        }
      ]
    },
    {
      "name": "8. Load Test - Multiple Sessions",
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"userId\": \"{{testUserId}}\",\n  \"amount\": 10\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/prizeout/session",
          "host": ["{{baseUrl}}"],
          "path": ["api", "prizeout", "session"]
        }
      },
      "response": [],
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Response time is less than 3000ms', function () {",
              "    pm.expect(pm.response.responseTime).to.be.below(3000);",
              "});",
              "",
              "pm.test('Status code is 200 or 400', function () {",
              "    pm.expect(pm.response.code).to.be.oneOf([200, 400]);",
              "});"
            ]
          }
        }
      ]
    }
  ]
}
