rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User documents - users can only access their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null && 
                     request.auth.token.admin == true;
    }
    
    // Family documents - access controlled by family membership
    match /families/{familyId} {
      allow read, write: if request.auth != null && 
                            (request.auth.uid in resource.data.members ||
                             request.auth.uid == resource.data.ownerId);
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.ownerId;
    }
    
    // Memories - role-based access within families
    match /memories/{memoryId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.userId ||
                      request.auth.uid in resource.data.sharedWith ||
                      request.auth.token.admin == true);
      allow write: if request.auth != null && 
                      (request.auth.uid == resource.data.userId ||
                       hasWritePermission(request.auth.uid, resource.data.familyId));
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
                       (request.auth.uid == resource.data.userId ||
                        hasDeletePermission(request.auth.uid, resource.data.familyId));
    }
    
    // Letters - role-based access
    match /letters/{letterId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.authorId ||
                      request.auth.uid == resource.data.recipientId ||
                      request.auth.token.admin == true);
      allow write: if request.auth != null && 
                      (request.auth.uid == resource.data.authorId ||
                       hasWritePermission(request.auth.uid, resource.data.familyId));
      allow create: if request.auth != null && 
                       request.auth.uid == request.resource.data.authorId;
    }
    
    // Folders - user and family access
    match /folders/{folderId} {
      allow read, write: if request.auth != null && 
                            (request.auth.uid == resource.data.userId ||
                             hasReadPermission(request.auth.uid, resource.data.familyId));
    }
    
    // Admin-only collections
    match /campaigns/{docId} {
      allow read: if true; // Public campaigns can be read
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
    }
    
    match /templates/{type}/{templateId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
    }
    
    // Message tracking - user and admin access
    match /messagesSent/{docId} {
      allow read: if request.auth != null && 
                     (request.auth.uid == resource.data.userId ||
                      request.auth.token.admin == true);
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
      allow create: if request.auth != null;
    }
    
    // Notifications - user-specific
    match /notifications/{notificationId} {
      allow read, write: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }
    
    // Commission ledger - admin only
    match /commissionLedger/{docId} {
      allow read, write: if request.auth != null && 
                            request.auth.token.admin == true;
    }
    
    // Prizeout sessions - user-specific
    match /prizeoutSessions/{sessionId} {
      allow read, write: if request.auth != null && 
                            request.auth.uid == resource.data.userId;
    }
    
    // Subscriptions - Stripe webhook and user access
    match /subscriptions/{subscriptionId} {
      allow read: if request.auth != null && (
        request.auth.uid == resource.data.userId ||
        request.auth.token.admin == true
      );
      allow write: if request.auth != null; // Allow webhooks
    }
    
    // CMS content - admin write, public read
    match /cms/{docId} {
      allow read: if true;
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
    }
    
    // Analytics data - admin only
    match /analytics/{docId} {
      allow read, write: if request.auth != null && 
                            request.auth.token.admin == true;
    }
    
    // Admin collection
    match /admins/{adminId} {
      allow read, write: if request.auth != null && 
                            request.auth.token.admin == true;
    }
    
    // Public collections
    match /public/{docId} {
      allow read: if true;
      allow write: if request.auth != null && 
                      request.auth.token.admin == true;
    }
    
    // Helper functions
    function hasReadPermission(userId, familyId) {
      return familyId == null || (
        exists(/databases/$(database)/documents/families/$(familyId)) &&
        userId in get(/databases/$(database)/documents/families/$(familyId)).data.members
      );
    }
    
    function hasWritePermission(userId, familyId) {
      return familyId == null || (
        exists(/databases/$(database)/documents/families/$(familyId)) &&
        userId in get(/databases/$(database)/documents/families/$(familyId)).data.members &&
        get(/databases/$(database)/documents/families/$(familyId)).data.memberRoles[userId] in ['owner', 'contributor']
      );
    }
    
    function hasDeletePermission(userId, familyId) {
      return familyId == null || (
        exists(/databases/$(database)/documents/families/$(familyId)) &&
        userId in get(/databases/$(database)/documents/families/$(familyId)).data.members &&
        get(/databases/$(database)/documents/families/$(familyId)).data.memberRoles[userId] == 'owner'
      );
    }
    
    function isAdminUser() {
      return request.auth != null && request.auth.token.admin == true;
    }
    
    // Deny all other access
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
